class Solution {
public:
    ListNode* mergeTwoSortedLists(ListNode* list1, ListNode* list2) {
        if(!list1)
            return list2;
        if(!list2)
            return list1;

        if(list1->val <= list2->val) {
            list1->next = mergeTwoSortedLists(list1->next, list2);
            return list1;
        } else {
            list2->next = mergeTwoSortedLists(list1, list2->next);
            return list2;
        }
        
        return NULL;
    }
    
    ListNode* partitionAndMerge(int s, int e, vector<ListNode*>& lists) {
        if(s == e)
            return lists[s];
        
        if(s > e)
            return NULL;
        
        int m = s + (e-s)/2;
        
        ListNode* list1 = partitionAndMerge(s, m, lists);
        ListNode* list2 = partitionAndMerge(m+1, e, lists);
        
        return mergeTwoSortedLists(list1, list2);
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        int n = lists.size();
        
        if(n == 0)
            return NULL;
        
        return partitionAndMerge(0, n-1, lists);
        
    }
};
